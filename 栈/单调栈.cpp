#include "header.h"

// 单调栈中存放的数据应该是有序的
// 单调递增栈：只有比栈顶小的才能入栈，否则就把栈顶出栈后，再入栈。
//           出栈时可能会有一些计算。适用于求解第一个大于该位置元素的数
// 单调递减栈：与单调递增栈相反。适用于求解第一个小于该位置元素的数

// 哨兵技巧
// 对于有些时候，如果会用到数组的全部元素，即栈中的元素最后都要出栈，那么很可能因为没有考虑边界而无法通过。所以我们可以使用 哨兵法 。
// 或者添加INT_MAX或者INT_MIN
// 例如在 {1, 3, 4, 5, 2, 9, 6} 末尾添加一个 -1 作为哨兵，变成了 {1, 3, 4, 5, 2, 9, 6, -1} ，这种技巧可以简化代码逻辑。


// 模板
int monoStack(vector<int> &nums) {
    stack<int> s;
    int ans = 0;
    for (int &i: nums) {
        while (!s.empty() && s.top() < i) { // 单调递增栈
            s.pop();
        }
        // 做一些操作
        s.push(i);
    }
}

// 单调栈求解经典问题：求解第一个大于 / 小于该位置的元素。
// 单调栈经典题目：接雨水、柱状图中最大的矩形、每日温度等。
