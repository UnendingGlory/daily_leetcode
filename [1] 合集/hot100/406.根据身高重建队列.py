from typing import List
# 打乱顺序的一群人站成一个队列。
# people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。
# 重新构造并返回输入数组 people 所表示的队列。返回的队列应该格式化为数组 queue。

# 即用 people 构建一个队列 queue，满足 people中的值的性质。
# queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。

# 输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
# 输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
# 解释：编号为 0 的人身高为 5，没有身高更高或者相同的人排在他前面。
#      编号为 1 的人身高为 7，没有身高更高或者相同的人排在他前面。
#      编号为 2 的人身高为 5，有 2个身高更高或者相同的人排在他前面。
#      ....

# Solution: 首先，按照第一个元素从大到小排序，然后按照第二个元素从小到大排序。
# [[7, 0], [7, 1], [6, 1], [5, 0], [5, 2], [4, 4]]
# 对第一个元素从大到小排序，则对于每个元素，在其之前的元素个数，就是大于等于该元素的数量。
# 对第二个元素从小到大排序，是为了插入操作减少插入次数。
# 数组从后往前插入，假设结果数组为 ans。
# 1. ans []，长度为0，小于等于 [7, 0]中的0，[7, 0]直接插入尾部。 ans = [[7, 0]]
# 2. ans 长度为1，小于等于 [7, 1]中的1，[7, 1]直接插入尾部。     ans = [[7, 0], [7, 1]]
# 3. ans 长度为2，大于 [6, 1]中的1，[6, 1]插入到 1的位置。   ans = [[7, 0], [6, 1], [7, 1]]
# 4. ans 长度为3，大于 [5, 0]中的0，[5, 0]插入到 0的位置。
# ...
# 即若 结果数组长度 大于 遍历到的元素 [h, k]中的 k，则将该元素插入到 k的位置。
# 能这么做的原因：[结果数组中已存在的元素均比 h要高]。

# 时间复杂度：O(n^2)
class Solution:
    def reconstructQueue(self, people: List[List[int]]) -> List[List[int]]:
        # python中按照多值排序，按照元素排序顺序塞入元组即可。
        people.sort(key=lambda x: (-x[0], x[1])) # 第一个从大到小，第二个从小到大
        ans = []
        for p in people:
            if len(ans) <= p[1]:
                ans.append(p)
            else:
                ans.insert(p[1], p)
        return ans
