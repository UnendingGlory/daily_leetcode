#include "header.h"


// 在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。
// 请找出那个只出现一次的数字。

// 对每一个二进制位求和，得到结果，然后再对3求余。
// [3, 3, 5, 3]
// 3: 0 0 1 1
// 3: 0 0 1 1
// 5: 0 1 0 1
// 3: 0 0 1 1
//和: 0 1 3 4
//余: 0 1 0 1 --> 5 (对3求余得到结果)


// Solution1: 具体的操作：使用位运算符
// 从高位到低位,ans初始化为0
// 0 + 1 = 1, 1左移:10
// 10 + 0 = 10, 10左移:100
// 100 + 1 = 101, ...
// 得到最终结果 000000000...101
// 使用位运算，按照上述流程操作即可。
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans = 0, bit;
        // int的最高位是符号位，所以从30位开始
        // 从高位开始操作累加
        for (int i = 30; i >= 0; ++i) {
            bit = 0;
            for (int &num: nums) {
                bit += ((num >> i) & 1);
            }
            ans <<= 1;
            ans += bit % 3;
        }
        return ans;
    }
};
